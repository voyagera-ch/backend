// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package voyageraDB

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO ACTIVITIES (
  trip_id, address, name, bio, start_at, end_at, latitude, longitude, is_hotel
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, trip_id, address, name, bio, start_at, end_at, latitude, longitude, is_hotel, is_deleted
`

type CreateActivityParams struct {
	TripID    pgtype.Int8
	Address   string
	Name      pgtype.Text
	Bio       pgtype.Text
	StartAt   pgtype.Timestamp
	EndAt     pgtype.Timestamp
	Latitude  pgtype.Float8
	Longitude pgtype.Float8
	IsHotel   pgtype.Bool
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRow(ctx, createActivity,
		arg.TripID,
		arg.Address,
		arg.Name,
		arg.Bio,
		arg.StartAt,
		arg.EndAt,
		arg.Latitude,
		arg.Longitude,
		arg.IsHotel,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.Address,
		&i.Name,
		&i.Bio,
		&i.StartAt,
		&i.EndAt,
		&i.Latitude,
		&i.Longitude,
		&i.IsHotel,
		&i.IsDeleted,
	)
	return i, err
}

const createImage = `-- name: CreateImage :one
INSERT INTO IMAGES (
  activities_id, url, latitude, longitude, is_activity
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, activities_id, url, latitude, longitude, is_activity, is_deleted
`

type CreateImageParams struct {
	ActivitiesID pgtype.Int8
	Url          string
	Latitude     pgtype.Float8
	Longitude    pgtype.Float8
	IsActivity   pgtype.Bool
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, createImage,
		arg.ActivitiesID,
		arg.Url,
		arg.Latitude,
		arg.Longitude,
		arg.IsActivity,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ActivitiesID,
		&i.Url,
		&i.Latitude,
		&i.Longitude,
		&i.IsActivity,
		&i.IsDeleted,
	)
	return i, err
}

const createTrip = `-- name: CreateTrip :one
INSERT INTO TRIPS (
  start_at, end_at, name, bio
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, start_at, end_at, name, bio, is_deleted
`

type CreateTripParams struct {
	StartAt pgtype.Timestamp
	EndAt   pgtype.Timestamp
	Name    string
	Bio     pgtype.Text
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.db.QueryRow(ctx, createTrip,
		arg.StartAt,
		arg.EndAt,
		arg.Name,
		arg.Bio,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.StartAt,
		&i.EndAt,
		&i.Name,
		&i.Bio,
		&i.IsDeleted,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO USERS (
  password, phonenumber, email
) VALUES (
  crypt($1, gen_salt('testSalt12341808')), $2, $3
)
RETURNING id, password, phonenumber, email, is_deleted
`

type CreateUserParams struct {
	Crypt       string
	Phonenumber pgtype.Text
	Email       pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Crypt, arg.Phonenumber, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Phonenumber,
		&i.Email,
		&i.IsDeleted,
	)
	return i, err
}

const createUserTrip = `-- name: CreateUserTrip :one
INSERT INTO USER_TRIP (
  user_id, trip_id, is_admin
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, trip_id, is_admin, is_deleted
`

type CreateUserTripParams struct {
	UserID  pgtype.Int8
	TripID  pgtype.Int8
	IsAdmin pgtype.Bool
}

func (q *Queries) CreateUserTrip(ctx context.Context, arg CreateUserTripParams) (UserTrip, error) {
	row := q.db.QueryRow(ctx, createUserTrip, arg.UserID, arg.TripID, arg.IsAdmin)
	var i UserTrip
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TripID,
		&i.IsAdmin,
		&i.IsDeleted,
	)
	return i, err
}

const deleteActivity = `-- name: DeleteActivity :exec
UPDATE ACTIVITIES SET
  is_deleted = TRUE
WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteActivity, id)
	return err
}

const deleteImage = `-- name: DeleteImage :exec
UPDATE IMAGES SET
  is_deleted = TRUE
WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteImage, id)
	return err
}

const deleteTrip = `-- name: DeleteTrip :exec
UPDATE TRIPS SET
  is_deleted = TRUE
WHERE id = $1
`

func (q *Queries) DeleteTrip(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTrip, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE USERS SET
  is_deleted = TRUE
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserTrip = `-- name: DeleteUserTrip :exec
UPDATE USER_TRIP SET
  is_deleted = TRUE
WHERE id = $1
`

func (q *Queries) DeleteUserTrip(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUserTrip, id)
	return err
}

const getActivity = `-- name: GetActivity :one
SELECT id, trip_id, address, name, bio, start_at, end_at, latitude, longitude, is_hotel, is_deleted FROM ACTIVITIES
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetActivity(ctx context.Context, id int64) (Activity, error) {
	row := q.db.QueryRow(ctx, getActivity, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.Address,
		&i.Name,
		&i.Bio,
		&i.StartAt,
		&i.EndAt,
		&i.Latitude,
		&i.Longitude,
		&i.IsHotel,
		&i.IsDeleted,
	)
	return i, err
}

const getImage = `-- name: GetImage :one
SELECT id, activities_id, url, latitude, longitude, is_activity, is_deleted FROM IMAGES
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetImage(ctx context.Context, id int64) (Image, error) {
	row := q.db.QueryRow(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ActivitiesID,
		&i.Url,
		&i.Latitude,
		&i.Longitude,
		&i.IsActivity,
		&i.IsDeleted,
	)
	return i, err
}

const getTrip = `-- name: GetTrip :one
SELECT id, start_at, end_at, name, bio, is_deleted FROM TRIPS
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrip(ctx context.Context, id int64) (Trip, error) {
	row := q.db.QueryRow(ctx, getTrip, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.StartAt,
		&i.EndAt,
		&i.Name,
		&i.Bio,
		&i.IsDeleted,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, password, phonenumber, email, is_deleted FROM USERS
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Phonenumber,
		&i.Email,
		&i.IsDeleted,
	)
	return i, err
}

const getUserTrip = `-- name: GetUserTrip :one
SELECT id, user_id, trip_id, is_admin, is_deleted FROM USER_TRIP
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserTrip(ctx context.Context, id int64) (UserTrip, error) {
	row := q.db.QueryRow(ctx, getUserTrip, id)
	var i UserTrip
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TripID,
		&i.IsAdmin,
		&i.IsDeleted,
	)
	return i, err
}

const listActivities = `-- name: ListActivities :many
SELECT id, trip_id, address, name, bio, start_at, end_at, latitude, longitude, is_hotel, is_deleted FROM ACTIVITIES
`

func (q *Queries) ListActivities(ctx context.Context) ([]Activity, error) {
	rows, err := q.db.Query(ctx, listActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.Address,
			&i.Name,
			&i.Bio,
			&i.StartAt,
			&i.EndAt,
			&i.Latitude,
			&i.Longitude,
			&i.IsHotel,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listImages = `-- name: ListImages :many
SELECT id, activities_id, url, latitude, longitude, is_activity, is_deleted FROM IMAGES
`

func (q *Queries) ListImages(ctx context.Context) ([]Image, error) {
	rows, err := q.db.Query(ctx, listImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.ActivitiesID,
			&i.Url,
			&i.Latitude,
			&i.Longitude,
			&i.IsActivity,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTrips = `-- name: ListTrips :many
SELECT id, start_at, end_at, name, bio, is_deleted FROM TRIPS
`

func (q *Queries) ListTrips(ctx context.Context) ([]Trip, error) {
	rows, err := q.db.Query(ctx, listTrips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.StartAt,
			&i.EndAt,
			&i.Name,
			&i.Bio,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserTrips = `-- name: ListUserTrips :many
SELECT id, user_id, trip_id, is_admin, is_deleted FROM USER_TRIP
`

func (q *Queries) ListUserTrips(ctx context.Context) ([]UserTrip, error) {
	rows, err := q.db.Query(ctx, listUserTrips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserTrip
	for rows.Next() {
		var i UserTrip
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TripID,
			&i.IsAdmin,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, password, phonenumber, email, is_deleted FROM USERS
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Password,
			&i.Phonenumber,
			&i.Email,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActivity = `-- name: UpdateActivity :exec
UPDATE ACTIVITIES SET
  trip_id = $2, 
  address = $3, 
  name = $4, 
  bio = $5, 
  start_at = $6, 
  end_at = $7, 
  latitude = $8, 
  longitude = $9, 
  is_hotel = $10
WHERE id = $1
`

type UpdateActivityParams struct {
	ID        int64
	TripID    pgtype.Int8
	Address   string
	Name      pgtype.Text
	Bio       pgtype.Text
	StartAt   pgtype.Timestamp
	EndAt     pgtype.Timestamp
	Latitude  pgtype.Float8
	Longitude pgtype.Float8
	IsHotel   pgtype.Bool
}

func (q *Queries) UpdateActivity(ctx context.Context, arg UpdateActivityParams) error {
	_, err := q.db.Exec(ctx, updateActivity,
		arg.ID,
		arg.TripID,
		arg.Address,
		arg.Name,
		arg.Bio,
		arg.StartAt,
		arg.EndAt,
		arg.Latitude,
		arg.Longitude,
		arg.IsHotel,
	)
	return err
}

const updateAdminUserTrip = `-- name: UpdateAdminUserTrip :exec
UPDATE USER_TRIP SET
  is_admin = $2
WHERE id = $1
`

type UpdateAdminUserTripParams struct {
	ID      int64
	IsAdmin pgtype.Bool
}

func (q *Queries) UpdateAdminUserTrip(ctx context.Context, arg UpdateAdminUserTripParams) error {
	_, err := q.db.Exec(ctx, updateAdminUserTrip, arg.ID, arg.IsAdmin)
	return err
}

const updateImage = `-- name: UpdateImage :exec
UPDATE IMAGES SET
  activities_id = $2, 
  url = $3, 
  latitude = $4,
  longitude = $5,
  is_activity = $6
WHERE id = $1
`

type UpdateImageParams struct {
	ID           int64
	ActivitiesID pgtype.Int8
	Url          string
	Latitude     pgtype.Float8
	Longitude    pgtype.Float8
	IsActivity   pgtype.Bool
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) error {
	_, err := q.db.Exec(ctx, updateImage,
		arg.ID,
		arg.ActivitiesID,
		arg.Url,
		arg.Latitude,
		arg.Longitude,
		arg.IsActivity,
	)
	return err
}

const updateTrip = `-- name: UpdateTrip :exec
UPDATE TRIPS SET
  start_at = $2, 
  end_at = $3, 
  name = $4,
  bio = $5
WHERE id = $1
`

type UpdateTripParams struct {
	ID      int64
	StartAt pgtype.Timestamp
	EndAt   pgtype.Timestamp
	Name    string
	Bio     pgtype.Text
}

func (q *Queries) UpdateTrip(ctx context.Context, arg UpdateTripParams) error {
	_, err := q.db.Exec(ctx, updateTrip,
		arg.ID,
		arg.StartAt,
		arg.EndAt,
		arg.Name,
		arg.Bio,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE USERS SET
  password = $2, 
  phonenumber = $3, 
  email = $4
WHERE id = $1
`

type UpdateUserParams struct {
	ID          int64
	Password    string
	Phonenumber pgtype.Text
	Email       pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Password,
		arg.Phonenumber,
		arg.Email,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE USERS SET
  password = crypt($3, gen_salt('testSalt12341808'))
WHERE id = $1 
AND password = crypt($2, password)
`

type UpdateUserPasswordParams struct {
	ID      int64
	Crypt   string
	Crypt_2 string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Crypt, arg.Crypt_2)
	return err
}
